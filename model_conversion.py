# -*- coding: utf-8 -*-
"""model_conversion

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10fB9pSFMSn1ETmYA2SxLwlxWGySZ5t4p
"""

import os
import keras
from keras.models import load_model, Sequential
from scipy.io import loadmat
from keras.layers import (
    Input,
    Activation,
    Dense,
    Flatten,
    ZeroPadding2D,
    Dropout,
    BatchNormalization
)
from keras.layers.convolutional import (
    Convolution2D,
    MaxPooling2D,
    AveragePooling2D
)
import h5py


#loading weights from the reference model

data = loadmat('/content/drive/My Drive/combined/vgg_face.mat', matlab_compatible=False, struct_as_record=False)
net = data['net'][0][0]
ref_model_layers = net.layers
ref_model_layers = ref_model_layers[0]

#building base model

b_model = Sequential()
num_of_ref_model_layers = ref_model_layers.shape[0]
for i in range(num_of_ref_model_layers):
    ref_model_layer = ref_model_layers[i][0][0].name[0]
    if ref_model_layer.find("conv") == 0 or ref_model_layer.find("fc") == 0:
        weights = ref_model_layers[i][0,0].weights
        weights_shape = weights[0][0].shape
        filter_x = weights_shape[0]; filter_y = weights_shape[1]
        number_of_filters = weights_shape[3]
 
        if ref_model_layer.find("conv") == 0:
            if i == 0:
                b_model.add(ZeroPadding2D((1,1),input_shape=(224,224, 3)))
            else:
                b_model.add(ZeroPadding2D((1,1)))
        b_model.add(Convolution2D(number_of_filters, (filter_x, filter_y), name= ref_model_layer))
 
    else:
        if ref_model_layer.find("relu") == 0:
            b_model.add(Activation('relu', name=ref_model_layer))
        elif ref_model_layer.find("dropout") == 0:
            b_model.add(Dropout(0.5, name=ref_model_layer))
        elif ref_model_layer.find("pool") == 0:
            b_model.add(MaxPooling2D((2,2), strides=(2,2), name=ref_model_layer))
b_model.add(Activation('relu'))
b_model.add(Flatten())

#loading the weight from reference model to base model

base_model_layer_names = [layer.name for layer in b_model.layers]

for i in range(num_of_ref_model_layers):
  ref_model_layer = ref_model_layers[i][0][0].name[0]
  if ref_model_layer in base_model_layer_names:
    if ref_model_layer.find("conv") == 0 or ref_model_layer.find("fc") == 0:
      base_model_index = base_model_layer_names.index(ref_model_layer)

      weights = ref_model_layers[i][0][0].weights[0,0]
      bias = ref_model_layers[i][0][0].weights[0,1]

      b_model.layers[base_model_index].set_weights([weights, bias[:,0]])

b_model.trainable = False
model = Sequential()
for layer in b_model.layers:
  model.add(layer)

model.add(Dense(128, activation = 'relu'))
model.add(BatchNormalization())
model.add(Dense(2, activation = 'softmax'))

model.save('/content/drive/My Drive/pictures2/new_model.h5')